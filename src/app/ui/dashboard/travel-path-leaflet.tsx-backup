"use client";
import React from "react";
import {
  MapContainer,
  TileLayer,
  Polyline,
  Marker,
  Popup,
} from "react-leaflet";
import L from "leaflet"; // Import Leaflet core
import "leaflet/dist/leaflet.css"; // Leaflet CSS

const TravelPathLeaflet = () => {
  const path = [{ lat: 20.273157, lng: 85.806458 }];

  // Start and end points
  const start = path[0];
  const end = path[path.length - 1];

  // Identify repeated coordinates
  const repeatedCoords = path.filter(
    (coord, index, self) =>
      index !==
      self.findIndex((t) => t.lat === coord.lat && t.lng === coord.lng)
  );

  return (
    <>
      <div className="relative h-screen p-2">
        <MapContainer
          center={start} // Center the map at the start point
          zoom={13} // Zoom level to fit the whole path
          scrollWheelZoom={true} // Optional: disable scroll zoom
          style={{ width: "100%", height: "100%" }}
        >
          {/* TileLayer: OpenStreetMap tiles (or you can use other providers) */}
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />

          {/* Polyline representing the travel path */}
          <Polyline positions={path} />

          {/* Markers for repeated coordinates */}
          {repeatedCoords.map((coord, idx) => (
            <Marker
              key={idx}
              position={coord}
              icon={
                new L.Icon({
                  iconUrl: "https://example.com/your-icon.png", // Custom icon for stuck locations
                  iconSize: [32, 32],
                  iconAnchor: [16, 32],
                  popupAnchor: [0, -32],
                })
              }
            >
              <Popup>Vehicle is stuck here</Popup>
            </Marker>
          ))}
        </MapContainer>
      </div>
    </>
  );
};

export default TravelPathLeaflet;
